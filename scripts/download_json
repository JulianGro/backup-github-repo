#!/usr/bin/env node
Promise = require('bluebird')
const writeFile = Promise.promisify(require('fs').writeFile)
const path = require('path')
const config = require('../lib/config')
const { green, blue, grey } = require('chalk')

const [ section ] = process.argv.slice(2)

if (section !== 'issues' && section !== 'pulls') {
  throw new Error(`invalid section: ${section}`)
}

if (typeof config.token !== 'string') {
  require('../lib/init_token')()
  process.exit(1)
}

const folderPath = path.join(process.cwd(), `./repo-backup/${section}`)
const sectionPath = path.join(process.cwd(), `./repo-backup/${section}/data.json`)
console.log(grey(`${section} data path: ${sectionPath}`))

const getSectionData = require('../lib/get_section_data')
const format = require('../lib/format')

const save = sectionDataIndex => {
  return writeFile(sectionPath, JSON.stringify(sectionDataIndex, null, 2))
}

const getLocalSectionDataOrFetch = () => {
  try {
    sectionData = require(sectionPath)
    sectionDataCount = Object.keys(sectionData).length
    console.log(green(`${sectionDataCount} ${section} found at ${sectionPath}`))
    console.log(blue(`delete ${folderPath} and re-run this command to update`))
    return Promise.resolve(sectionData)
  } catch (err) {
    if (err.code !== 'MODULE_NOT_FOUND') throw err
    return getSectionData(section)
    .then(format)
    .then(save)
  }
}

getLocalSectionDataOrFetch()
.then(() => console.log(green(`done downloading ${section} data`)))
.catch(err => {
  console.error(`[download_json][${section}] failed to getLocalSectionDataOrFetch`, err)
  process.exit(1)
})
